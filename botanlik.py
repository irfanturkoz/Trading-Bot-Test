#!/usr/bin/env python3
"""
Botanlik - Kripto Sinyal Botu
Geli≈ümi≈ü formasyon tespiti ve risk y√∂netimi
"""

import os
import time
import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, as_completed
from dotenv import load_dotenv

# Environment variables
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID', '7977984015')

# Import modules
from formation_detector import (
    detect_tobo, detect_obo, detect_cup_and_handle, 
    detect_falling_wedge, detect_bullish_bearish_flag,
    filter_high_quality_formations, analyze_multiple_timeframes,
    detect_inverse_head_and_shoulders, detect_head_and_shoulders  # Yeni geli≈ümi≈ü fonksiyonlar
)
from data_fetcher import fetch_ohlcv
from signal_visualizer import SignalVisualizer
from telegram_notifier import send_telegram_message
from utils import format_price
from advanced_formation_analyzer import AdvancedFormationAnalyzer
from tp_sl_calculator import calculate_strict_tp_sl, format_signal_levels

# ============================================================================
# DATA FETCHING FUNCTIONS
# ============================================================================

def get_usdt_symbols():
    """
    Binance Futures'tan USDT √ßiftlerini √ßeker
    
    Returns:
        list: USDT sembol listesi
    """
    try:
        url = 'https://fapi.binance.com/fapi/v1/exchangeInfo'
        response = requests.get(url, timeout=10)
        data = response.json()
        symbols = [s['symbol'] for s in data['symbols'] 
                  if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING']
        return symbols
    except Exception as e:
        print(f"‚ùå Sembol listesi alƒ±namadƒ±: {e}")
        return []

def get_current_price(symbol):
    """
    Sembol√ºn anlƒ±k fiyatƒ±nƒ± √ßeker
    
    Args:
        symbol (str): Sembol adƒ±
        
    Returns:
        float: Anlƒ±k fiyat veya None
    """
    try:
        url = f'https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol}'
        response = requests.get(url, timeout=10)
        data = response.json()
        return float(data['price']) if 'price' in data else None
    except Exception as e:
        print(f"‚ùå {symbol} fiyatƒ± alƒ±namadƒ±: {e}")
        return None

# ============================================================================
# RISK MANAGEMENT FUNCTIONS
# ============================================================================

def calculate_optimal_risk(symbol, current_price, tp, sl, direction):
    """
    ISOLATED i≈ülemler i√ßin sabit 5x kaldƒ±ra√ß ile risk seviyesini hesaplar
    
    Args:
        symbol (str): Sembol adƒ±
        current_price (float): Mevcut fiyat
        tp (float): Take Profit seviyesi
        sl (float): Stop Loss seviyesi
        direction (str): 'Long' veya 'Short'
        
    Returns:
        dict: Risk hesaplama sonu√ßlarƒ±
    """
    if direction == 'Long':
        if current_price <= sl or tp <= current_price:
            return {
                'risk_level': 'Ge√ßersiz',
                'leverage': '5x',
                'position_size': 'Kasanƒ±n %5\'i',
                'risk_reward': '0.0:1',
                'potential_gain': '%0.0',
                'margin_type': 'ISOLATED',
                'risk_amount': '%0.0',
                'max_loss': '%0.0'
            }
        risk_percent = (current_price - sl) / current_price
        reward_percent = (tp - current_price) / current_price
    else:
        if current_price >= sl or tp >= current_price:
            return {
                'risk_level': 'Ge√ßersiz',
                'leverage': '5x',
                'position_size': 'Kasanƒ±n %5\'i',
                'risk_reward': '0.0:1',
                'potential_gain': '%0.0',
                'margin_type': 'ISOLATED',
                'risk_amount': '%0.0',
                'max_loss': '%0.0'
            }
        risk_percent = (sl - current_price) / current_price
        reward_percent = (current_price - tp) / current_price
    
    risk_reward_ratio = reward_percent / risk_percent if risk_percent > 0 else 0
    
    return {
        'risk_level': 'Sabit 5x',
        'leverage': '5x',
        'position_size': 'Kasanƒ±n %5\'i',
        'risk_reward': f'{risk_reward_ratio:.1f}:1',
        'potential_gain': f'%{reward_percent*5*100:.1f}',
        'margin_type': 'ISOLATED',
        'risk_amount': f'%{risk_percent*5*100:.1f}',
        'max_loss': f'%{risk_percent*5*100:.1f}'
    }

# ============================================================================
# ANALYSIS FUNCTIONS
# ============================================================================

def analyze_symbol(symbol, interval='4h', debug_mode=False):
    """
    Tek sembol i√ßin formasyon analizi yapar
    
    Args:
        symbol (str): Sembol adƒ±
        interval (str): Zaman dilimi
        debug_mode (bool): Debug modu
        
    Returns:
        dict: Analiz sonu√ßlarƒ±
    """
    try:
        if debug_mode:
            print(f"üîç {symbol} analizi ba≈ülatƒ±lƒ±yor...")
        
        # Veri √ßek
        df = fetch_ohlcv(symbol, interval)
        if df is None or len(df) < 100:
            if debug_mode:
                print(f"‚ùå {symbol} i√ßin yeterli veri yok")
            return None
        
        if debug_mode:
            print(f"‚úÖ {symbol} verisi alƒ±ndƒ± ({len(df)} mum)")
        
        # T√ºm formasyonlarƒ± tespit et
        formations = []
        
        # GELƒ∞≈ûMƒ∞≈û TOBO tespiti (Yeni 5.0 kurallarƒ±)
        tobo_result = detect_inverse_head_and_shoulders(df, window=30)
        if tobo_result:
            formations.append(tobo_result)
            if debug_mode:
                print(f"üìä Geli≈ümi≈ü TOBO tespit edildi: {tobo_result.get('quality_score', 'N/A')}/400")
        
        # GELƒ∞≈ûMƒ∞≈û OBO tespiti (Yeni 5.0 kurallarƒ±)
        obo_result = detect_head_and_shoulders(df, window=30)
        if obo_result:
            formations.append(obo_result)
            if debug_mode:
                print(f"üìä Geli≈ümi≈ü OBO tespit edildi: {obo_result.get('quality_score', 'N/A')}/400")
        
        # Eski formasyon tespitleri (yedek olarak)
        old_tobo_result = detect_tobo(df)
        if old_tobo_result:
            formations.append(old_tobo_result)
            if debug_mode:
                print(f"üìä Eski TOBO tespit edildi: {old_tobo_result.get('score', 'N/A')}")
        
        old_obo_result = detect_obo(df)
        if old_obo_result:
            formations.append(old_obo_result)
            if debug_mode:
                print(f"üìä Eski OBO tespit edildi: {old_obo_result.get('score', 'N/A')}")
        
        # Cup & Handle tespiti
        cup_handle_result = detect_cup_and_handle(df)
        if cup_handle_result:
            formations.append(cup_handle_result)
            if debug_mode:
                print(f"üìä Cup & Handle tespit edildi: {cup_handle_result.get('score', 'N/A')}")
        
        # Falling Wedge tespiti
        falling_wedge_result = detect_falling_wedge(df)
        if falling_wedge_result:
            formations.append(falling_wedge_result)
            if debug_mode:
                print(f"üìä Falling Wedge tespit edildi: {falling_wedge_result.get('score', 'N/A')}")
        
        # Bullish/Bearish Flag tespiti
        flag_result = detect_bullish_bearish_flag(df)
        if flag_result:
            formations.append(flag_result)
            if debug_mode:
                print(f"üìä Flag tespit edildi: {flag_result.get('score', 'N/A')}")
        
        if debug_mode:
            print(f"üìä Toplam {len(formations)} formasyon tespit edildi")
        
        # Kalite filtresi uygula
        strong_formations = filter_high_quality_formations(df, formations, debug_mode)
        
        if debug_mode:
            print(f"üéØ G√º√ßl√º formasyon sayƒ±sƒ±: {len(strong_formations)}")
        
        # T√úM G√ú√áL√ú FORMASYONLARI G√ñRSELLE≈ûTƒ∞R
        if strong_formations:
            try:
                visualizer = SignalVisualizer()
                
                if debug_mode:
                    print(f"üéØ {len(strong_formations)} g√º√ßl√º formasyon bulundu")
                
                # T√ºm g√º√ßl√º formasyonlarƒ± g√∂rselle≈ütir
                for i, formation in enumerate(strong_formations, 1):
                    formation_type = formation.get('type', 'UNKNOWN')
                    quality_score = formation.get('quality_score', 0)
                    
                    if debug_mode:
                        print(f"üìä {i}. Formasyon: {formation_type} (Skor: {quality_score})")
                    
                    # Her formasyonu ayrƒ± ayrƒ± g√∂rselle≈ütir
                    visualizer.visualize_single_formation(symbol, interval, formation, debug_mode)
                        
            except Exception as e:
                print(f"‚ùå G√∂rselle≈ütirme hatasƒ±: {e}")
        
        return {
            'symbol': symbol,
            'interval': interval,
            'total_formations': len(formations),
            'strong_formations': len(strong_formations),
            'best_formation': strong_formations[0] if strong_formations else None
        }
        
    except Exception as e:
        print(f"‚ùå {symbol} analiz hatasƒ±: {e}")
        return None

def get_scan_results(symbols=None, interval='4h', max_workers=5, debug_mode=False):
    """
    √áoklu sembol taramasƒ± yapar ve start.py i√ßin uygun format d√∂nd√ºr√ºr
    
    Args:
        symbols (list): Sembol listesi (None ise t√ºm USDT √ßiftleri)
        interval (str): Zaman dilimi
        max_workers (int): Maksimum thread sayƒ±sƒ±
        debug_mode (bool): Debug modu
        
    Returns:
        dict: Tarama sonu√ßlarƒ± (start.py formatƒ±nda)
    """
    try:
        print("üîç Geli≈ümi≈ü formasyon analiz sistemi ba≈ülatƒ±lƒ±yor...")
        analyzer = AdvancedFormationAnalyzer()
        
        # T√ºm sembolleri tara
        print("üìä T√ºm USDT sembolleri taranƒ±yor...")
        scan_results = analyzer.scan_all_symbols(max_workers=3)  # Daha az worker

        if scan_results:
            print(f"‚úÖ {len(scan_results)} y√ºksek kaliteli formasyon bulundu")

            # En iyi formasyonlarƒ± se√ß
            top_results = []
            for result in scan_results:
                if result.get('success') and result.get('best_formation'):
                    top_results.append(result)

            # Kalite skoruna g√∂re sƒ±rala
            def get_quality_score(result):
                quality_score = result.get('quality_score', 0)
                if isinstance(quality_score, dict):
                    return quality_score.get('total_score', 0)
                return quality_score
            
            top_results.sort(key=get_quality_score, reverse=True)
            
            # start.py formatƒ±nda sonu√ßlarƒ± hazƒ±rla
            opportunities = []
            for result in top_results[:10]:  # En iyi 10 formasyon
                symbol = result['symbol']
                formation = result['best_formation']
                quality_score = result.get('quality_score', 0)
                if isinstance(quality_score, dict):
                    quality_score_int = quality_score.get('total_score', 0)
                else:
                    quality_score_int = quality_score
                
                # Mevcut fiyatƒ± al
                current_price = get_current_price(symbol)
                if not current_price:
                    continue
                
                # TP/SL hesaplamalarƒ±
                entry_price = current_price
                direction = formation.get('direction', 'Long')
                formation_type = formation.get('type', 'Unknown')
                
                # Risk analizi
                risk_analysis = {
                    'position_size': 'Kasanƒ±n %5\'i',
                    'potential_gain': '%2.5',
                    'risk_amount': '%1.0',
                    'max_loss': '%1.0',
                    'risk_reward': '2.5:1'
                }
                
                # Sinyal g√ºc√º hesapla
                signal_strength = min(100, quality_score_int / 4)  # 400'den 100'e normalize et
                
                # TP/SL seviyeleri
                if direction == 'Long':
                    tp = entry_price * 1.025  # %2.5 yukarƒ±
                    sl = entry_price * 0.99   # %1 a≈üaƒüƒ±
                else:  # Short
                    tp = entry_price * 0.975  # %2.5 a≈üaƒüƒ±
                    sl = entry_price * 1.01   # %1 yukarƒ±
                
                # TP farkƒ± hesapla
                tpfark = abs(tp - entry_price) / entry_price
                
                opportunity = {
                    'symbol': symbol,
                    'y√∂n': direction,
                    'formasyon': formation_type,
                    'price': entry_price,
                    'tp': tp,
                    'sl': sl,
                    'tpfark': tpfark,
                    'risk_analysis': risk_analysis,
                    'signal_strength': signal_strength,
                    'rr_ratio': 2.5,
                    'quality_score': quality_score_int,
                    'tp_levels': {
                        'tp1': tp,
                        'tp2': tp * 1.01 if direction == 'Long' else tp * 0.99,
                        'tp3': tp * 1.02 if direction == 'Long' else tp * 0.98
                    }
                }
                
                opportunities.append(opportunity)
            
            return {
                "total_scanned": len(get_usdt_symbols()),
                "opportunities": opportunities,
                "scan_time": "3-5 dakika"
            }
        else:
            print("‚ùå Hi√ß formasyon bulunamadƒ±")
            return {
                "total_scanned": len(get_usdt_symbols()),
                "opportunities": [],
                "scan_time": "3-5 dakika"
            }

    except Exception as e:
        print(f"‚ùå Tarama hatasƒ±: {e}")
        return {
            "total_scanned": 0,
            "opportunities": [],
            "scan_time": "0 dakika"
        }

# ============================================================================
# MAIN FUNCTION
# ============================================================================

def main():
    """
    Ana fonksiyon - Bot √ßalƒ±≈ütƒ±rma
    """
    try:
        print("üöÄ Botanlik Bot ba≈ülatƒ±lƒ±yor...")

        # Geli≈ümi≈ü formasyon analiz sistemi
        print("üîç Geli≈ümi≈ü formasyon analiz sistemi ba≈ülatƒ±lƒ±yor...")
        analyzer = AdvancedFormationAnalyzer()
        
        # T√ºm sembolleri tara
        print("üìä T√ºm USDT sembolleri taranƒ±yor...")
        scan_results = analyzer.scan_all_symbols(max_workers=3)  # Daha az worker

        if scan_results:
            print(f"‚úÖ {len(scan_results)} y√ºksek kaliteli formasyon bulundu")

            # En iyi 3 formasyonu se√ß
            top_results = []
            for result in scan_results:
                if result.get('success') and result.get('best_formation'):
                    top_results.append(result)

            # Kalite skoruna g√∂re sƒ±rala ve en iyi 3'√º al
            def get_quality_score(result):
                quality_score = result.get('quality_score', 0)
                if isinstance(quality_score, dict):
                    return quality_score.get('total_score', 0)
                return quality_score
            
            top_results.sort(key=get_quality_score, reverse=True)
            top_3_results = top_results[:3]

            if top_3_results:
                print(f"üéØ En iyi 3 formasyon se√ßildi:")
                for i, result in enumerate(top_3_results, 1):
                    symbol = result['symbol']
                    formation = result['best_formation']
                    quality_score = result.get('quality_score', 0)
                    if isinstance(quality_score, dict):
                        quality_score_int = quality_score.get('total_score', 0)
                    else:
                        quality_score_int = quality_score
                    rr_ratio = formation.get('rr_levels', {}).get('rr_ratio', 0)
                    
                    print(f"{i}. {symbol}: {formation['type']} (Skor: {quality_score_int}/400, R/R: {rr_ratio:.2f}:1)")
                
                # Her bir formasyon i√ßin g√∂rselle≈ütirme ve Telegram g√∂nderimi
                for i, result in enumerate(top_3_results, 1):
                    symbol = result['symbol']
                    formation = result['best_formation']
                    quality_score = result.get('quality_score', 0)
                    if isinstance(quality_score, dict):
                        quality_score_int = quality_score.get('total_score', 0)
                    else:
                        quality_score_int = quality_score
                    
                    print(f"\nüìä {i}. Sƒ±ra - {symbol} i≈üleniyor...")
                    print(f"üìä Formasyon Tipi: {formation['type']}")
                    print(f"üéØ Kalite Skoru: {quality_score_int}/400")
                    print(f"üìà R/R Oranƒ±: {formation.get('rr_levels', {}).get('rr_ratio', 0):.2f}:1")
                    
                    # G√∂rselle≈ütirme ve Telegram g√∂nderimi
                    try:
                        visualizer = SignalVisualizer()
                        success = visualizer.visualize_single_formation(
                            symbol, '4h', formation, debug_mode=True
                        )
                        
                        if success:
                            print(f"‚úÖ {symbol} sinyali ba≈üarƒ±yla g√∂nderildi!")
                        else:
                            print(f"‚ùå {symbol} g√∂rselle≈ütirme hatasƒ±!")
                            
                    except Exception as e:
                        print(f"‚ùå {symbol} g√∂rselle≈ütirme hatasƒ±: {e}")
                    
                    # Formasyonlar arasƒ± kƒ±sa bekleme
                    if i < len(top_3_results):
                        print("‚è≥ Sonraki formasyon i√ßin bekleniyor...")
                        time.sleep(2)  # 2 saniye bekle
            else:
                print("‚ùå Y√ºksek kaliteli formasyon bulunamadƒ±")
        else:
            print("‚ùå Hi√ß formasyon bulunamadƒ±")

    except Exception as e:
        print(f"‚ùå Ana fonksiyon hatasƒ±: {e}")

if __name__ == "__main__":
    main() 